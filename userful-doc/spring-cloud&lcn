spring-cloud&lcn 分布式事务
1、什么是事务:
    ACID:
        A:Atomic 原子性 事务必须是原子工作单元；对于其数据修改，要么全都执行，要么全都不执行。
                 通常，与某个事务关联的操作具有共同的目标，并且是相互依赖的。
                 如果系统只执行这些操作的一个子集，则可能会破坏事务的总体目标。
                 原子性消除了系统处理操作子集的可能性。
        C:Consistency 一致性 事务在完成时，必须使所有的数据都保持一致状态。
                      在相关数据库中，所有规则都必须应用于事务的修改，以保持所有数据的完整性。
                      事务结束时，所有的内部数据结构（如 B 树索引或双向链表）都必须是正确的。
                      某些维护一致性的责任由应用程序开发人员承担，他们必须确保应用程序已强制所有已知的完整性约束。
                      例如，当开发用于转帐的应用程序时，应避免在转帐过程中任意移动小数点。
        I:Isolation 隔离性 指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。
                    由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。
                    事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。
        D:Durability 持久性 指的是只要事务成功结束，它对数据库所做的更新就必须永久保存下来。
                     即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。
    事务级别:
        Read uncommitted;
        Read committed;
        Repeatable read;
        Serializable;
    例子:
        设置事务的起始点: BEGIN a transaction;
        提交事务，使事务提交的数据成为持久不可更改的部分: COMMIT a transaction;
        撤销一个事务，回滚，使之成为事务开始前的状态: ROLLBACK a transaction;
        建立标签，用作部分回滚，使之恢复到标签初的状态: SAVE a transaction;

2、分布式带来的好处:
    高性能: 因为使用不同电脑的资源达到高性能。
    高可用性: 多个节点之间相互通信其中一个挂掉了还有其他的节点替代主节点。
    可扩展性: 业务的扩展不更改已开发好的功能，只需将新增的业务以应用的形式加入到集群即可不更改已有的工程。
    可伸缩性: 当性能成为瓶颈的时候只需要增加节点就可以将性能提升线性扩展。
3、分布式事务:
    为什么会有分布式事务: 因为不同应用的业务不同避免不了相互调用但交互的同时要用到不同节点的资源（不同的数据库）（例如Product a 应用 -1，Order b 应用 生成订单失败）。
                      因为事务不在一个数据库中的进行会导致A服务的事务成功B事务却失败了但A事务已经提交B不能保证一定成功造成业务场景出现问题。
    同步的方式能不能解决事务问题: 可以，但如果要求实时性较高的情况下不行，因为现在已有的解决方案是最终事务一致性。 《rabbitmq》
                             但如果实时性要求较高的话便不能保证业务场景正确进行。
    分布式事务的原理是什么Lock，Confirm，Notify: 代理数据库本地事务，使用第三方来操作通知数据库来进行事务的提交与回滚。
4、环境简介:
    介绍架构图: https://www.processon.com/diagraming/5bf65e13e4b018141e7c9c27
    问题演示: Product请求Order在Order打断点阻塞，停止product会导致Product事务失败，Order事务正常提交造成数据不一致性;
    介绍时序图:
    Debug源代码分析实现原理:
    介绍最终一致性的解决方案及原理:
